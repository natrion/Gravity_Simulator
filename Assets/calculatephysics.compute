#pragma kernel CSMain

struct Particle
{
    float3 position;
    float3 velocity;
};

RWStructuredBuffer<Particle> pointsIn;
RWStructuredBuffer<Particle> pointsOut;
RWStructuredBuffer<float4x4> MetrixTransforms;

float4x4 CreateTRSMatrix(float3 pos, float4 rot, float3 scale)
{
    // Create Rotation Matrix from Quaternion (rot: float4)
    float xx = rot.x * rot.x;
    float yy = rot.y * rot.y;
    float zz = rot.z * rot.z;
    float xy = rot.x * rot.y;
    float xz = rot.x * rot.z;
    float yz = rot.y * rot.z;
    float wx = rot.w * rot.x;
    float wy = rot.w * rot.y;
    float wz = rot.w * rot.z;

    float4x4 rotationMatrix = float4x4(
        1.0f - 2.0f * (yy + zz), 2.0f * (xy - wz), 2.0f * (xz + wy), 0.0f,
        2.0f * (xy + wz), 1.0f - 2.0f * (xx + zz), 2.0f * (yz - wx), 0.0f,
        2.0f * (xz - wy), 2.0f * (yz + wx), 1.0f - 2.0f * (xx + yy), 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
        );

    // Create Scaling Matrix
    float4x4 scaleMatrix = float4x4(
        scale.x, 0.0f, 0.0f, 0.0f,
        0.0f, scale.y, 0.0f, 0.0f,
        0.0f, 0.0f, scale.z, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
        );

    // Create Translation Matrix
    float4x4 translationMatrix = float4x4(
        1.0f, 0.0f, 0.0f, pos.x,
        0.0f, 1.0f, 0.0f, pos.y,
        0.0f, 0.0f, 1.0f, pos.z,
        0.0f, 0.0f, 0.0f, 1.0f
        );

    // Combine Translation, Rotation, and Scaling Matrices (TRS)
    return mul(translationMatrix, mul(rotationMatrix, scaleMatrix));
}
float frameLenght;
float GStrenght;
float size;
float pointMass;
float bounceForceMul = 1;//pauli repulsion force multipleyer
[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float collisionDis = 0.1;
    if (id.x < pointsIn.Length)//checks if this is still part od the distances
    {
        float3 mainPos = pointsIn[id.x].position;//gets the position that the thred is checking

        Particle changedPoint = pointsIn[id.x];
        
        for (int i = 0; i < pointsIn.Length; i++)
        {
            if (i != id.x)//only doing caculations on diferent points
            {
                

                Particle testParticle = pointsIn[i];
                float3 testPos = testParticle.position;//inicializatinf test pos

                //geting values for calculating gravity
                float3 dirTestPos = normalize(testPos - mainPos);
                float disTestPos = distance(mainPos, testPos);
                /*
                if (disTestPos < size)
                {
                    float3 samplingStartpos = (size - disTestPos )pointsIn[id.x].position - pointsIn[id.x].velocoty;
                    float3 pastvelocity = pointsIn[id.x].velocoty;
                    for (int i = 0; i < 5; i++)
                    {
                        float bounceForce = bounceForceMul / pow(disTestPos / size, 12);
                        samplingStartpos += bounceForce * (dirTestPos * -1);
                        changedVel += bounceForce * (dirTestPos * -1);
                        pastvelocity
                    }

                }*/

                //calculating gravity
                float gravityForce = (pointMass / (disTestPos * disTestPos)) * GStrenght;
                changedPoint.velocity += gravityForce * dirTestPos;

                //calculating bounce force from samples
                float bounceForce = bounceForceMul / pow(disTestPos / size, 12);
                changedPoint.velocity += bounceForce * (dirTestPos * -1);
            }
        }

        float3 disTochange = frameLenght * changedPoint.velocity;
        changedPoint.position += disTochange;

        MetrixTransforms[id.x] = CreateTRSMatrix(changedPoint.position, float4(0, 0, 0, 1), float3(1, 1, 1) * size);
        pointsOut[id.x] = changedPoint;

    }
}
