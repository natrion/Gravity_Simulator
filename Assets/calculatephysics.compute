#pragma kernel CSMain

struct particleGroup
{
    int id;
    float3 position;
    float3 velocity;
    float mass;
};
struct Particle
{
    int GroupId;
    float3 position;
};

AppendStructuredBuffer<float3> debugInf;

RWStructuredBuffer<Particle> pointsIn;
RWStructuredBuffer<Particle> pointsOut;
//AppendStructuredBuffer<int2> particleGroupsIn; // first one is particle second one is paricle group
//AppendStructuredBuffer<int2> particleGroupsOut; // first one is particle second one is paricle group
RWStructuredBuffer<particleGroup> particleGroupsIn;
RWStructuredBuffer<particleGroup> particleGroupsOut;
RWStructuredBuffer<float4x4> MetrixTransforms;

bool NormalHitsSphere(float3 normal, float3 origin, float3 spherePos, float sphereRadius, out float3 hitPos) {
    float3 L = spherePos - origin;   // Vector from ray origin to sphere center
    float tca = dot(L, normal);      // Projection of L onto the normal (ray)
    float d2 = dot(L, L) - tca * tca; // Perpendicular distance squared

    float r2 = sphereRadius * sphereRadius;
    if (d2 > r2) return false; // No hit, normal misses the sphere

    float thc = sqrt(r2 - d2); // Distance from tca to intersection points
    float t = tca - thc; // Closest intersection point along the normal

    if (t < 0) return false; // Sphere is behind the origin, no hit

    hitPos = origin + normal * t; // Compute the intersection position
    return true;
}


float4x4 CreateTRSMatrix(float3 pos, float4 rot, float3 scale)
{
    // Create Rotation Matrix from Quaternion (rot: float4)
    float xx = rot.x * rot.x;
    float yy = rot.y * rot.y;
    float zz = rot.z * rot.z;
    float xy = rot.x * rot.y;
    float xz = rot.x * rot.z;
    float yz = rot.y * rot.z;
    float wx = rot.w * rot.x;
    float wy = rot.w * rot.y;
    float wz = rot.w * rot.z;

    float4x4 rotationMatrix = float4x4(
        1.0f - 2.0f * (yy + zz), 2.0f * (xy - wz), 2.0f * (xz + wy), 0.0f,
        2.0f * (xy + wz), 1.0f - 2.0f * (xx + zz), 2.0f * (yz - wx), 0.0f,
        2.0f * (xz - wy), 2.0f * (yz + wx), 1.0f - 2.0f * (xx + yy), 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
        );

    // Create Scaling Matrix
    float4x4 scaleMatrix = float4x4(
        scale.x, 0.0f, 0.0f, 0.0f,
        0.0f, scale.y, 0.0f, 0.0f,
        0.0f, 0.0f, scale.z, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
        );

    // Create Translation Matrix
    float4x4 translationMatrix = float4x4(
        1.0f, 0.0f, 0.0f, pos.x,
        0.0f, 1.0f, 0.0f, pos.y,
        0.0f, 0.0f, 1.0f, pos.z,
        0.0f, 0.0f, 0.0f, 1.0f
        );

    // Combine Translation, Rotation, and Scaling Matrices (TRS)
    return mul(translationMatrix, mul(rotationMatrix, scaleMatrix));
}
float RandomFloat(float3 position)
{
    // Simple hash function for pseudo-random number generation
    uint seed = (uint)(position.x * 73.0f + position.y * 97.0f + position.z * 131.0f);
    seed = (seed << 13) ^ seed;
    seed = seed * (seed * seed * 15731 + 789221) + 1376312589;
    float randomValue = (float)(seed & 0x7fffffff) / 0x7fffffff; // Normalize to [0, 1]
    return randomValue;
}
float Random(float seed)
{
    return frac(sin(seed) * 43758.5453);
}


float RandomRange(float seed, float min, float max)
{
    return lerp(min, max, Random(seed));
}
float3 GetExitPoint(float3 origin, float3 direction, float3 sphereCenter, float sphereRadius) {
    float3 oc = origin - sphereCenter; // Vector from sphere center to origin
    float a = dot(direction, direction);
    float b = 2.0f * dot(oc, direction);
    float c = dot(oc, oc) - sphereRadius * sphereRadius;

    float discriminant = b * b - 4.0f * a * c;

    if (discriminant < 0) return origin; // No intersection, return original point

    float t = (-b + sqrt(discriminant)) / (2.0f * a); // Take the positive solution

    return origin + direction * t; // Return the exit point
}
float3 CalculateBounceDirection(float3 hitPoint, float3 lightDir, float3 sphereCenter, float sphereRadius)
{
    // Calculate the normal at the point of impact (from the sphere's center to the hit point)
    float3 normal = normalize(hitPoint - sphereCenter);

    // Calculate the bounce direction using the reflection formula
    return lightDir - 2.0 * dot(lightDir, normal) * normal;

}

float frameLenght;
float GStrenght;
float size;
float pointMass;
float bounceForceMul = 1;//bounce force multipleyer
float bounceFrictionLoss = 0.2;
float framecalSpeedMul = 1;
float numthreadCeil;

int whatPart = 0;
#define NUM_THREADS 2 

[numthreads(NUM_THREADS,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int comLenght = pointsIn.Length;
    int comlenghtCeil = numthreadCeil * NUM_THREADS;
    float collisionDis = 0.1;
	if (whatPart == 0)//checks if this is still part od the distances
    {
        if (particleGroupsIn[id.x].mass >0)
        {

            float3 mainPos = particleGroupsIn[id.x].position;//gets the position that the thred is checking

            particleGroup changedPoint = particleGroupsIn[id.x];

            //going thrue all points to calculate forces
            for (int i = 0; i < comLenght; i++)
            {
                if (i != id.x && i == particleGroupsIn[i].id && particleGroupsIn[i].mass>0)//only doing caculations on diferent points
                {
                    
                    particleGroup testParticle = particleGroupsIn[i];
                    float3 testPos = testParticle.position;//inicializatinf test pos

                    //geting values for calculating 
                    float3 dirTestPos = (testPos != mainPos) ? normalize(testPos - mainPos) : float3(0, 0, 0);
                    float disTestPos = distance(mainPos, testPos);
                    float3 velDif = testParticle.velocity - changedPoint.velocity;
                    float velDifScale = length(velDif);
                    //calculating gravity
                    float gravityForce = (particleGroupsIn[i].mass / (disTestPos * disTestPos)) * GStrenght;

                    if (disTestPos >size)
                    {
                        changedPoint.velocity += gravityForce * dirTestPos;
                    }
                   
                    changedPoint.velocity += velDif *min(1, gravityForce);
                  
                    float pushForce = (particleGroupsIn[i].mass / (disTestPos * disTestPos* disTestPos)) * GStrenght * GStrenght;

                    changedPoint.velocity += pushForce*-dirTestPos;
                    

                }

            }
            //caculating velociti for points that are not close together
            float3 disTochange = frameLenght * changedPoint.velocity * framecalSpeedMul;
            changedPoint.position += disTochange;

            //apling buffers
            particleGroupsOut[id.x] = changedPoint;
            
        }
        

    }
	else if (whatPart == 1)
	{

        int Pid =id.x ;
        Particle particle = pointsIn[Pid];

        particleGroup mainParticleGroup = particleGroupsIn[particle.GroupId];
    
        float3 mainPos = particle.position + mainParticleGroup.position;
        
        for (int i = 0; i < comLenght; i++)
        {
            Particle testPoint = pointsIn[i];


            particleGroup testGroup = particleGroupsIn[testPoint.GroupId];

            if (i != Pid && testPoint.GroupId != particle.GroupId)
            {

                 //geting values for calculating 
                float3 testPos = testPoint.position + testGroup.position;//inicializatinf test pos
                float3 dirTestPos = normalize(testPos - mainPos);
                float disTestPos = distance(mainPos, testPos);
                float3 velDif = (testGroup.velocity - mainParticleGroup.velocity);// changedPoint.velocity is 0,0,0
                float velDifScale = length(velDif);
                
                if (disTestPos < size)
                {
                    
                    if (velDifScale < 0.1)
                    {
                        debugInf.Append(particleGroupsIn[Pid].position);

                        bool whoIsBigger = true; // false = changedPoint is bigger
                        if (mainParticleGroup.mass > testGroup.mass)
                        {
                            whoIsBigger = false;
                        }
                        else if (mainParticleGroup.mass == testGroup.mass)
                        {
                            if (id.x < i)
                            {
                                whoIsBigger = false;
                            }
                        }
                        if (whoIsBigger == true)
                        {
                            particle.GroupId = testGroup.id;
                            particle.position = mainParticleGroup.position - testGroup.position;
                            particleGroupsOut[Pid].mass -= pointMass;
                            particleGroupsOut[testPoint.GroupId].mass += pointMass;
                            particleGroupsOut[testPoint.GroupId].velocity = lerp(mainParticleGroup.velocity, testGroup.velocity, testGroup.mass / (mainParticleGroup.mass + testGroup.mass));

                            mainParticleGroup = particleGroupsIn[particle.GroupId];
                        }
                    }
                    else {
 
                        // Get the exit point where the vector leaves the sphere
                        float3 hitPoint = GetExitPoint(mainPos, velDif, testPos, size);
                        // Compute the normal at the exit point
                        float3 normal = normalize(hitPoint - testPos);
                        // Compute the reflected velocity
                        float3 bounceDir = mainParticleGroup.velocity - 2 * dot(mainParticleGroup.velocity, normal) * normal;
                        // Ensure the bounce direction is normalized
                        bounceDir = normalize(bounceDir);
                        particleGroupsOut[Pid].position = hitPoint;

                        float3 velAdd = velDifScale * (mainParticleGroup.mass / (mainParticleGroup.mass + testGroup.mass) )*2 * (1 - bounceFrictionLoss) * velDif;
                        particleGroupsOut[Pid].velocity += velAdd;
                        //particleGroupsOut[Pid].velocity = bounceDir * length(mainParticleGroup.velocity) * (1 - bounceFrictionLoss); // Use the original velocity magnitude
                    }
                    
                }
             
            }
        }
		pointsOut[Pid] = particle;
		MetrixTransforms[Pid] = CreateTRSMatrix(mainPos, float4(0, 0, 0, 1), float3(1, 1, 1) * size);

    }
    
}
