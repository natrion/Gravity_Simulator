#pragma kernel CSMain

struct particleGroup
{
    int id;
    float3 position;
    float3 velocity;
    float mass;
};
struct Particle
{
    int GroupId;
    float3 position;
};

RWStructuredBuffer<Particle> pointsIn;
RWStructuredBuffer<Particle> pointsOut;
//AppendStructuredBuffer<int2> particleGroupsIn; // first one is particle second one is paricle group
//AppendStructuredBuffer<int2> particleGroupsOut; // first one is particle second one is paricle group
RWStructuredBuffer<particleGroup> particleGroupsIn;
RWStructuredBuffer<particleGroup> particleGroupsOut;
RWStructuredBuffer<float4x4> MetrixTransforms;

bool NormalHitsSphere(float3 normal, float3 origin, float3 spherePos, float sphereRadius, out float3 hitPos) {
    float3 L = spherePos - origin;   // Vector from ray origin to sphere center
    float tca = dot(L, normal);      // Projection of L onto the normal (ray)
    float d2 = dot(L, L) - tca * tca; // Perpendicular distance squared

    float r2 = sphereRadius * sphereRadius;
    if (d2 > r2) return false; // No hit, normal misses the sphere

    float thc = sqrt(r2 - d2); // Distance from tca to intersection points
    float t = tca - thc; // Closest intersection point along the normal

    if (t < 0) return false; // Sphere is behind the origin, no hit

    hitPos = origin + normal * t; // Compute the intersection position
    return true;
}


float4x4 CreateTRSMatrix(float3 pos, float4 rot, float3 scale)
{
    // Create Rotation Matrix from Quaternion (rot: float4)
    float xx = rot.x * rot.x;
    float yy = rot.y * rot.y;
    float zz = rot.z * rot.z;
    float xy = rot.x * rot.y;
    float xz = rot.x * rot.z;
    float yz = rot.y * rot.z;
    float wx = rot.w * rot.x;
    float wy = rot.w * rot.y;
    float wz = rot.w * rot.z;

    float4x4 rotationMatrix = float4x4(
        1.0f - 2.0f * (yy + zz), 2.0f * (xy - wz), 2.0f * (xz + wy), 0.0f,
        2.0f * (xy + wz), 1.0f - 2.0f * (xx + zz), 2.0f * (yz - wx), 0.0f,
        2.0f * (xz - wy), 2.0f * (yz + wx), 1.0f - 2.0f * (xx + yy), 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
        );

    // Create Scaling Matrix
    float4x4 scaleMatrix = float4x4(
        scale.x, 0.0f, 0.0f, 0.0f,
        0.0f, scale.y, 0.0f, 0.0f,
        0.0f, 0.0f, scale.z, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
        );

    // Create Translation Matrix
    float4x4 translationMatrix = float4x4(
        1.0f, 0.0f, 0.0f, pos.x,
        0.0f, 1.0f, 0.0f, pos.y,
        0.0f, 0.0f, 1.0f, pos.z,
        0.0f, 0.0f, 0.0f, 1.0f
        );

    // Combine Translation, Rotation, and Scaling Matrices (TRS)
    return mul(translationMatrix, mul(rotationMatrix, scaleMatrix));
}
float RandomFloat(float3 position)
{
    // Simple hash function for pseudo-random number generation
    uint seed = (uint)(position.x * 73.0f + position.y * 97.0f + position.z * 131.0f);
    seed = (seed << 13) ^ seed;
    seed = seed * (seed * seed * 15731 + 789221) + 1376312589;
    float randomValue = (float)(seed & 0x7fffffff) / 0x7fffffff; // Normalize to [0, 1]
    return randomValue;
}
float Random(float seed)
{
    return frac(sin(seed) * 43758.5453);
}


float RandomRange(float seed, float min, float max)
{
    return lerp(min, max, Random(seed));
}
float3 GetExitPoint(float3 origin, float3 direction, float3 sphereCenter, float sphereRadius) {
    float3 oc = origin - sphereCenter; // Vector from sphere center to origin
    float a = dot(direction, direction);
    float b = 2.0f * dot(oc, direction);
    float c = dot(oc, oc) - sphereRadius * sphereRadius;

    float discriminant = b * b - 4.0f * a * c;

    if (discriminant < 0) return origin; // No intersection, return original point

    float t = (-b + sqrt(discriminant)) / (2.0f * a); // Take the positive solution

    return origin + direction * t; // Return the exit point
}
float3 CalculateBounceDirection(float3 hitPoint, float3 lightDir, float3 sphereCenter, float sphereRadius)
{
    // Calculate the normal at the point of impact (from the sphere's center to the hit point)
    float3 normal = normalize(hitPoint - sphereCenter);

    // Calculate the bounce direction using the reflection formula
    return lightDir - 2.0 * dot(lightDir, normal) * normal;

}

float frameLenght;
float GStrenght;
float size;
float pointMass;
float bounceForceMul = 1;//bounce force multipleyer
float bounceFrictionLoss = 0.2;
float framecalSpeedMul = 1;
#define MAX_POINTS 20
[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int comLenght = pointsIn.Length;
    
    float collisionDis = 0.1;
	if (id.x < comLenght)//checks if this is still part od the distances
    {

        float3 mainPos = pointsIn[id.x].position;//gets the position that the thred is checking

        particleGroup changedPoint = particleGroupsIn[id.x];

        //going thrue all points to calculate forces
		for (int i = 0; i < comLenght; i++)
        {
            if (i != id.x)//only doing caculations on diferent points
            {
                Particle paticle = pointsIn[i];
                particleGroup testParticle =  particleGroupsIn[paticle.GroupId];
                float3 testPos = testParticle.position+ paticle.position;//inicializatinf test pos

                //geting values for calculating 
                float3 dirTestPos = normalize(testPos - mainPos);
                float disTestPos = distance(mainPos, testPos);
                float3 velDif = (testParticle.velocity - changedPoint.velocity);// changedPoint.velocity is 0,0,0
                float velDifScale = length(velDif);
                //adding points to all points that are clsoe to main point 

                if (disTestPos < size)
                {
                    // Get the exit point where the vector leaves the sphere
                    float3 hitPoint = GetExitPoint(changedPoint.position, velDif, testParticle.position, size);
                    // Compute the normal at the exit point
                    float3 normal = normalize(hitPoint - testParticle.position);
                    // Compute the reflected velocity
                    float3 bounceDir = changedPoint.velocity - 2 * dot(changedPoint.velocity, normal) * normal;
                    // Ensure the bounce direction is normalized
                    bounceDir = normalize(bounceDir);
                    changedPoint.position = hitPoint;
                    changedPoint.velocity = bounceDir * length(changedPoint.velocity) * (1 - bounceFrictionLoss); // Use the original velocity magnitude
                    //merging two groups if too close 
                    //if (velDifScale < 0.1 & id.x< i ) {
                   //     if (changedPoint.mass > testParticle.mass){
                   //         testParticle.id = changedPoint.id;
                   //     }
                   // }

                }



                //calculating gravity
                float gravityForce = (pointMass / (disTestPos * disTestPos)) * GStrenght;
                changedPoint.velocity += gravityForce * dirTestPos;

            }
        }


        //caculating velociti for points that are not close together
        float3 disTochange = frameLenght * changedPoint.velocity * framecalSpeedMul;
        changedPoint.position += disTochange;

        //apling buffers
        particleGroupsOut[id.x] = changedPoint;

    }
	else if (id.x < comLenght * 2)
	{
        Particle particle = pointsIn[id.x - comLenght];

		particleGroup particleGroup = particleGroupsIn[particle.GroupId];

        //if (particle.GroupId != particleGroup.id)
       // {
       //     particle.GroupId = particleGroup.id;
       //     particleGroup = particleGroupsIn[particle.GroupId];
       // }

		pointsOut[id.x - comLenght] = particle;
		MetrixTransforms[id.x - comLenght] = CreateTRSMatrix(particleGroup.position+particle.position, float4(0, 0, 0, 1), float3(1, 1, 1) * size);

    }
    
}
