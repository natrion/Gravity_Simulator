#pragma kernel CSMain


RWStructuredBuffer<float3> positionsIn;
RWStructuredBuffer<float4x4> MetrixTransforms;
RWStructuredBuffer<float3> positionsOut;

float4x4 CreateTRSMatrix(float3 pos, float4 rot, float3 scale)
{
    // Create Rotation Matrix from Quaternion (rot: float4)
    float xx = rot.x * rot.x;
    float yy = rot.y * rot.y;
    float zz = rot.z * rot.z;
    float xy = rot.x * rot.y;
    float xz = rot.x * rot.z;
    float yz = rot.y * rot.z;
    float wx = rot.w * rot.x;
    float wy = rot.w * rot.y;
    float wz = rot.w * rot.z;

    float4x4 rotationMatrix = float4x4(
        1.0f - 2.0f * (yy + zz), 2.0f * (xy - wz), 2.0f * (xz + wy), 0.0f,
        2.0f * (xy + wz), 1.0f - 2.0f * (xx + zz), 2.0f * (yz - wx), 0.0f,
        2.0f * (xz - wy), 2.0f * (yz + wx), 1.0f - 2.0f * (xx + yy), 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
        );

    // Create Scaling Matrix
    float4x4 scaleMatrix = float4x4(
        scale.x, 0.0f, 0.0f, 0.0f,
        0.0f, scale.y, 0.0f, 0.0f,
        0.0f, 0.0f, scale.z, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
        );

    // Create Translation Matrix
    float4x4 translationMatrix = float4x4(
        1.0f, 0.0f, 0.0f, pos.x,
        0.0f, 1.0f, 0.0f, pos.y,
        0.0f, 0.0f, 1.0f, pos.z,
        0.0f, 0.0f, 0.0f, 1.0f
        );

    // Combine Translation, Rotation, and Scaling Matrices (TRS)
    return mul(translationMatrix, mul(rotationMatrix, scaleMatrix));
}
float frameLenght;
float GStrenght;
float size;
float pointMass;
[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x < positionsIn.Length)//checks if this is still part od the distances
    {
        float3 mainPos = positionsIn[id.x];//gets the position that the thred is checking

        float3 changedPosition = mainPos;
        
        for (int i = 0; i < positionsIn.Length; i++)
        {
            if (i != id.x)
            {
                float3 testPos = positionsIn[i];//testing this position

                //geting values for calculating gravity
                float3 dirTestPos = normalize(testPos - mainPos);
                float disTestPos = distance(mainPos, testPos);
                //calculating gravity
                float gravityForce = (pointMass / (disTestPos * disTestPos)) * GStrenght;
                float disTochange = frameLenght * gravityForce;
                changedPosition += disTochange * dirTestPos;
            }
        }
        MetrixTransforms[id.x] = CreateTRSMatrix(changedPosition, float4(0, 0, 0, 1), float3(1, 1, 1) * size);
        positionsOut[id.x] = changedPosition;

    }
}
